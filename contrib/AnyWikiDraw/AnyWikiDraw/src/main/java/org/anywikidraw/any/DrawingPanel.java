/*
 * @(#)DrawingPanel.java
 *
 * Copyright (c) 1996-2009 by the original authors of JHotDraw
 * and all its contributors.
 * All rights reserved.
 *
 * The copyright of this software is owned by the authors and  
 * contributors of the JHotDraw project ("the copyright holders").  
 * You may not use, copy or modify this software, except in  
 * accordance with the license agreement you entered into with  
 * the copyright holders. For details see accompanying license terms. 
 */
package org.anywikidraw.any;

import java.util.prefs.*;
import org.jhotdraw.util.*;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.event.*;
import org.jhotdraw.draw.*;
import org.jhotdraw.samples.svg.gui.DrawingComponent;
import static org.jhotdraw.samples.svg.SVGAttributeKeys.*;

/**
 * DrawingPanel.
 * 
 * @author Werner Randelshofer
 * @version $Id: DrawingPanel.java 107 2009-06-15 19:33:05Z rawcoder $
 */
public class DrawingPanel extends JPanel implements DrawingComponent {

    private ResourceBundleUtil labels;
    private EventListenerList listeners;
    private Preferences prefs;

    /** Creates new instance. */
    public DrawingPanel() {
        labels = ResourceBundleUtil.getBundle("org.jhotdraw.samples.svg.Labels");
        ResourceBundleUtil drawLabels = ResourceBundleUtil.getBundle("org.jhotdraw.draw.Labels");

        try {
            prefs = Preferences.userNodeForPackage(getClass());
        } catch (SecurityException e) {
            // prefs is null, because we are not permitted to read preferences
        }

        initComponents();

        // The SVGDrawingPanel does not anymore create the drawing editor on its own.
        drawingPanel.setEditor(new DefaultDrawingEditor());
    }

    public void setDrawing(Drawing d) {
        drawingPanel.setDrawing(d);
    }

    public Drawing getDrawing() {
        return drawingPanel.getDrawing();
    }

    public DrawingView getView() {
        return drawingPanel.getView();
    }

    public DrawingEditor getEditor() {
        return drawingPanel.getEditor();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        toolButtonGroup = new javax.swing.ButtonGroup();
        drawingPanel = new org.jhotdraw.samples.svg.SVGDrawingPanel();
        toolsPanel = new javax.swing.JPanel();
        summaryToolBar = new org.anywikidraw.any.SummaryToolBar();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));
        setLayout(new java.awt.BorderLayout());
        add(drawingPanel, java.awt.BorderLayout.CENTER);

        toolsPanel.setBackground(new java.awt.Color(255, 255, 255));
        toolsPanel.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        toolsPanel.setOpaque(true);
        toolsPanel.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        toolsPanel.add(summaryToolBar, gridBagConstraints);

        saveButton.setFont(new java.awt.Font("Dialog", 1, 11));
        saveButton.setText(labels.getString("saveDrawing")); // NOI18N
        saveButton.setActionCommand("save");
        saveButton.setOpaque(false);
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        toolsPanel.add(saveButton, gridBagConstraints);

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 11));
        cancelButton.setText(labels.getString("cancel")); // NOI18N
        cancelButton.setActionCommand("cancel");
        cancelButton.setOpaque(false);
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fireActionPerformed(evt);
            }
        });
        toolsPanel.add(cancelButton, new java.awt.GridBagConstraints());

        add(toolsPanel, java.awt.BorderLayout.SOUTH);
    }// </editor-fold>//GEN-END:initComponents

    private void fireActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fireActionPerformed
        for (ActionListener l : listeners.getListeners(ActionListener.class)) {
            l.actionPerformed(evt);
        }
    }//GEN-LAST:event_fireActionPerformed

    public void addActionListener(ActionListener listener) {
        if (listeners == null) {
            listeners = new EventListenerList();
            listeners.add(ActionListener.class, listener);
        }

    }

    public void removeActionListener(ActionListener listener) {
        if (listeners != null) {
            listeners.remove(ActionListener.class, listener);
            if (listeners.getListenerCount() == 0) {
                listeners = null;
            }
        }
    }

    public String getSummary() {
        return summaryToolBar.getSummary();
    }

    public void setSummaryVisible(boolean newValue) {
        summaryToolBar.setVisible(newValue);

        GridBagConstraints gbc = new GridBagConstraints();
        gbc.anchor = java.awt.GridBagConstraints.EAST;
        gbc.insets = new java.awt.Insets(0, 10, 0, 0);
        gbc.weightx = (newValue) ? 0d : 1d;
        ((GridBagLayout) toolsPanel.getLayout()).setConstraints(saveButton, gbc);
    }

    public boolean isSummaryVisible() {
        return summaryToolBar.isVisible();
    }

    public JComponent getComponent() {
        return this;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private org.jhotdraw.samples.svg.SVGDrawingPanel drawingPanel;
    private javax.swing.JButton saveButton;
    private org.anywikidraw.any.SummaryToolBar summaryToolBar;
    private javax.swing.ButtonGroup toolButtonGroup;
    private javax.swing.JPanel toolsPanel;
    // End of variables declaration//GEN-END:variables
}
