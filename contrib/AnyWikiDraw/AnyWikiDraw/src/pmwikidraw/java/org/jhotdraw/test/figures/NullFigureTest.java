/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.figures;

import org.jhotdraw.figures.NullFigure;
import junit.framework.TestCase;
// JUnitDoclet begin import
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase NullFigureTest is generated by
 * JUnitDoclet to hold the tests for NullFigure.
 * @see org.jhotdraw.figures.NullFigure
 */
// JUnitDoclet end javadoc_class
public class NullFigureTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private NullFigure nullfigure;
	// JUnitDoclet end class

	/**
	 * Constructor NullFigureTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public NullFigureTest(String name) {
		// JUnitDoclet begin method NullFigureTest
		super(name);
		// JUnitDoclet end method NullFigureTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public NullFigure createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new NullFigure();
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		nullfigure = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		nullfigure = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method basicDisplayBox()
	/**
	 * Method testBasicDisplayBox is testing basicDisplayBox
	 * @see org.jhotdraw.figures.NullFigure#basicDisplayBox(java.awt.Point, java.awt.Point)
	 */
	// JUnitDoclet end javadoc_method basicDisplayBox()
	public void testBasicDisplayBox() throws Exception {
		// JUnitDoclet begin method basicDisplayBox
		// JUnitDoclet end method basicDisplayBox
	}

	// JUnitDoclet begin javadoc_method displayBox()
	/**
	 * Method testDisplayBox is testing displayBox
	 * @see org.jhotdraw.figures.NullFigure#displayBox()
	 */
	// JUnitDoclet end javadoc_method displayBox()
	public void testDisplayBox() throws Exception {
		// JUnitDoclet begin method displayBox
		// JUnitDoclet end method displayBox
	}

	// JUnitDoclet begin javadoc_method draw()
	/**
	 * Method testDraw is testing draw
	 * @see org.jhotdraw.figures.NullFigure#draw(java.awt.Graphics)
	 */
	// JUnitDoclet end javadoc_method draw()
	public void testDraw() throws Exception {
		// JUnitDoclet begin method draw
		// JUnitDoclet end method draw
	}

	// JUnitDoclet begin javadoc_method handles()
	/**
	 * Method testHandles is testing handles
	 * @see org.jhotdraw.figures.NullFigure#handles()
	 */
	// JUnitDoclet end javadoc_method handles()
	public void testHandles() throws Exception {
		// JUnitDoclet begin method handles
		// JUnitDoclet end method handles
	}

	// JUnitDoclet begin javadoc_method isEmpty()
	/**
	 * Method testIsEmpty is testing isEmpty
	 * @see org.jhotdraw.figures.NullFigure#isEmpty()
	 */
	// JUnitDoclet end javadoc_method isEmpty()
	public void testIsEmpty() throws Exception {
		// JUnitDoclet begin method isEmpty
		// JUnitDoclet end method isEmpty
	}

	// JUnitDoclet begin javadoc_method figures()
	/**
	 * Method testFigures is testing figures
	 * @see org.jhotdraw.figures.NullFigure#figures()
	 */
	// JUnitDoclet end javadoc_method figures()
	public void testFigures() throws Exception {
		// JUnitDoclet begin method figures
		// JUnitDoclet end method figures
	}

	// JUnitDoclet begin javadoc_method findFigureInside()
	/**
	 * Method testFindFigureInside is testing findFigureInside
	 * @see org.jhotdraw.figures.NullFigure#findFigureInside(int, int)
	 */
	// JUnitDoclet end javadoc_method findFigureInside()
	public void testFindFigureInside() throws Exception {
		// JUnitDoclet begin method findFigureInside
		// JUnitDoclet end method findFigureInside
	}

	// JUnitDoclet begin javadoc_method clone()
	/**
	 * Method testClone is testing clone
	 * @see org.jhotdraw.figures.NullFigure#clone()
	 */
	// JUnitDoclet end javadoc_method clone()
	public void testClone() throws Exception {
		// JUnitDoclet begin method clone
		// JUnitDoclet end method clone
	}

	// JUnitDoclet begin javadoc_method includes()
	/**
	 * Method testIncludes is testing includes
	 * @see org.jhotdraw.figures.NullFigure#includes(org.jhotdraw.framework.Figure)
	 */
	// JUnitDoclet end javadoc_method includes()
	public void testIncludes() throws Exception {
		// JUnitDoclet begin method includes
		// JUnitDoclet end method includes
	}

	// JUnitDoclet begin javadoc_method decompose()
	/**
	 * Method testDecompose is testing decompose
	 * @see org.jhotdraw.figures.NullFigure#decompose()
	 */
	// JUnitDoclet end javadoc_method decompose()
	public void testDecompose() throws Exception {
		// JUnitDoclet begin method decompose
		// JUnitDoclet end method decompose
	}

	// JUnitDoclet begin javadoc_method release()
	/**
	 * Method testRelease is testing release
	 * @see org.jhotdraw.figures.NullFigure#release()
	 */
	// JUnitDoclet end javadoc_method release()
	public void testRelease() throws Exception {
		// JUnitDoclet begin method release
		// JUnitDoclet end method release
	}

	// JUnitDoclet begin javadoc_method invalidate()
	/**
	 * Method testInvalidate is testing invalidate
	 * @see org.jhotdraw.figures.NullFigure#invalidate()
	 */
	// JUnitDoclet end javadoc_method invalidate()
	public void testInvalidate() throws Exception {
		// JUnitDoclet begin method invalidate
		// JUnitDoclet end method invalidate
	}

	// JUnitDoclet begin javadoc_method getAttribute()
	/**
	 * Method testGetAttribute is testing getAttribute
	 * @see org.jhotdraw.figures.NullFigure#getAttribute(java.lang.String)
	 */
	// JUnitDoclet end javadoc_method getAttribute()
	public void testGetAttribute() throws Exception {
		// JUnitDoclet begin method getAttribute
		// JUnitDoclet end method getAttribute
	}

	// JUnitDoclet begin javadoc_method setAttribute()
	/**
	 * Method testSetAttribute is testing setAttribute
	 * @see org.jhotdraw.figures.NullFigure#setAttribute(java.lang.String, java.lang.Object)
	 */
	// JUnitDoclet end javadoc_method setAttribute()
	public void testSetAttribute() throws Exception {
		// JUnitDoclet begin method setAttribute
		// JUnitDoclet end method setAttribute
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
