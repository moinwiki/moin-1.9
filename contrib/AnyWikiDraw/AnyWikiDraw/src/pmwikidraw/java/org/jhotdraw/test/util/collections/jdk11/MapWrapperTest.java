/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.util.collections.jdk11;

import org.jhotdraw.util.collections.jdk11.MapWrapper;
import junit.framework.TestCase;
// JUnitDoclet begin import
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase MapWrapperTest is generated by
 * JUnitDoclet to hold the tests for MapWrapper.
 * @see org.jhotdraw.util.collections.jdk11.MapWrapper
 */
// JUnitDoclet end javadoc_class
public class MapWrapperTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private MapWrapper mapwrapper;
	// JUnitDoclet end class

	/**
	 * Constructor MapWrapperTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public MapWrapperTest(String name) {
		// JUnitDoclet begin method MapWrapperTest
		super(name);
		// JUnitDoclet end method MapWrapperTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public MapWrapper createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new MapWrapper();
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		mapwrapper = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		mapwrapper = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method size()
	/**
	 * Method testSize is testing size
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#size()
	 */
	// JUnitDoclet end javadoc_method size()
	public void testSize() throws Exception {
		// JUnitDoclet begin method size
		// JUnitDoclet end method size
	}

	// JUnitDoclet begin javadoc_method isEmpty()
	/**
	 * Method testIsEmpty is testing isEmpty
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#isEmpty()
	 */
	// JUnitDoclet end javadoc_method isEmpty()
	public void testIsEmpty() throws Exception {
		// JUnitDoclet begin method isEmpty
		// JUnitDoclet end method isEmpty
	}

	// JUnitDoclet begin javadoc_method containsKey()
	/**
	 * Method testContainsKey is testing containsKey
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#containsKey(java.lang.Object)
	 */
	// JUnitDoclet end javadoc_method containsKey()
	public void testContainsKey() throws Exception {
		// JUnitDoclet begin method containsKey
		// JUnitDoclet end method containsKey
	}

	// JUnitDoclet begin javadoc_method containsValue()
	/**
	 * Method testContainsValue is testing containsValue
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#containsValue(java.lang.Object)
	 */
	// JUnitDoclet end javadoc_method containsValue()
	public void testContainsValue() throws Exception {
		// JUnitDoclet begin method containsValue
		// JUnitDoclet end method containsValue
	}

	// JUnitDoclet begin javadoc_method get()
	/**
	 * Method testGet is testing get
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#get(java.lang.Object)
	 */
	// JUnitDoclet end javadoc_method get()
	public void testGet() throws Exception {
		// JUnitDoclet begin method get
		// JUnitDoclet end method get
	}

	// JUnitDoclet begin javadoc_method put()
	/**
	 * Method testPut is testing put
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#put(java.lang.Object, java.lang.Object)
	 */
	// JUnitDoclet end javadoc_method put()
	public void testPut() throws Exception {
		// JUnitDoclet begin method put
		// JUnitDoclet end method put
	}

	// JUnitDoclet begin javadoc_method remove()
	/**
	 * Method testRemove is testing remove
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#remove(java.lang.Object)
	 */
	// JUnitDoclet end javadoc_method remove()
	public void testRemove() throws Exception {
		// JUnitDoclet begin method remove
		// JUnitDoclet end method remove
	}

	// JUnitDoclet begin javadoc_method putAll()
	/**
	 * Method testPutAll is testing putAll
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#putAll(java.util.Map)
	 */
	// JUnitDoclet end javadoc_method putAll()
	public void testPutAll() throws Exception {
		// JUnitDoclet begin method putAll
		// JUnitDoclet end method putAll
	}

	// JUnitDoclet begin javadoc_method clear()
	/**
	 * Method testClear is testing clear
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#clear()
	 */
	// JUnitDoclet end javadoc_method clear()
	public void testClear() throws Exception {
		// JUnitDoclet begin method clear
		// JUnitDoclet end method clear
	}

	// JUnitDoclet begin javadoc_method keySet()
	/**
	 * Method testKeySet is testing keySet
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#keySet()
	 */
	// JUnitDoclet end javadoc_method keySet()
	public void testKeySet() throws Exception {
		// JUnitDoclet begin method keySet
		// JUnitDoclet end method keySet
	}

	// JUnitDoclet begin javadoc_method values()
	/**
	 * Method testValues is testing values
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#values()
	 */
	// JUnitDoclet end javadoc_method values()
	public void testValues() throws Exception {
		// JUnitDoclet begin method values
		// JUnitDoclet end method values
	}

	// JUnitDoclet begin javadoc_method entrySet()
	/**
	 * Method testEntrySet is testing entrySet
	 * @see org.jhotdraw.util.collections.jdk11.MapWrapper#entrySet()
	 */
	// JUnitDoclet end javadoc_method entrySet()
	public void testEntrySet() throws Exception {
		// JUnitDoclet begin method entrySet
		// JUnitDoclet end method entrySet
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
