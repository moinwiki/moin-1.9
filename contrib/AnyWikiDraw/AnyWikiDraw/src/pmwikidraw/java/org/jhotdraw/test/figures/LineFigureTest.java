/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.figures;

import org.jhotdraw.figures.LineFigure;
import junit.framework.TestCase;
// JUnitDoclet begin import
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase LineFigureTest is generated by
 * JUnitDoclet to hold the tests for LineFigure.
 * @see org.jhotdraw.figures.LineFigure
 */
// JUnitDoclet end javadoc_class
public class LineFigureTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private LineFigure linefigure;
	// JUnitDoclet end class

	/**
	 * Constructor LineFigureTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public LineFigureTest(String name) {
		// JUnitDoclet begin method LineFigureTest
		super(name);
		// JUnitDoclet end method LineFigureTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public LineFigure createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new LineFigure();
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		linefigure = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		linefigure = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method startPoint()
	/**
	 * Method testStartPoint is testing startPoint
	 * @see org.jhotdraw.figures.LineFigure#startPoint()
	 */
	// JUnitDoclet end javadoc_method startPoint()
	public void testStartPoint() throws Exception {
		// JUnitDoclet begin method startPoint
		// JUnitDoclet end method startPoint
	}

	// JUnitDoclet begin javadoc_method endPoint()
	/**
	 * Method testEndPoint is testing endPoint
	 * @see org.jhotdraw.figures.LineFigure#endPoint()
	 */
	// JUnitDoclet end javadoc_method endPoint()
	public void testEndPoint() throws Exception {
		// JUnitDoclet begin method endPoint
		// JUnitDoclet end method endPoint
	}

	// JUnitDoclet begin javadoc_method setPoints()
	/**
	 * Method testSetPoints is testing setPoints
	 * @see org.jhotdraw.figures.LineFigure#setPoints(java.awt.Point, java.awt.Point)
	 */
	// JUnitDoclet end javadoc_method setPoints()
	public void testSetPoints() throws Exception {
		// JUnitDoclet begin method setPoints
		// JUnitDoclet end method setPoints
	}

	// JUnitDoclet begin javadoc_method basicDisplayBox()
	/**
	 * Method testBasicDisplayBox is testing basicDisplayBox
	 * @see org.jhotdraw.figures.LineFigure#basicDisplayBox(java.awt.Point, java.awt.Point)
	 */
	// JUnitDoclet end javadoc_method basicDisplayBox()
	public void testBasicDisplayBox() throws Exception {
		// JUnitDoclet begin method basicDisplayBox
		// JUnitDoclet end method basicDisplayBox
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
