/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.util;

import java.io.File;
import java.io.FileInputStream;

import org.jhotdraw.util.StorableInput;

// JUnitDoclet begin import
import junit.framework.TestCase;
// JUnitDoclet end import

/*
 * Generated by JUnitDoclet, a tool provided by
 * ObjectFab GmbH under LGPL.
 * Please see www.junitdoclet.org, www.gnu.org
 * and www.objectfab.de for informations about
 * the tool, the licence and the authors.
 */

// JUnitDoclet begin javadoc_class
/**
 * TestCase StorableInputTest is generated by
 * JUnitDoclet to hold the tests for StorableInput.
 * @see org.jhotdraw.util.StorableInput
 */
// JUnitDoclet end javadoc_class
public class StorableInputTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private StorableInput storableinput;
	// JUnitDoclet end class

	/**
	 * Constructor StorableInputTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public StorableInputTest(String name) {
		// JUnitDoclet begin method StorableInputTest
		super(name);
		// JUnitDoclet end method StorableInputTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public StorableInput createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		File tempFile = File.createTempFile("StorableInputTest", "dat");
		FileInputStream stream = new FileInputStream(tempFile);
		tempFile.deleteOnExit();
		return new StorableInput(stream);
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		storableinput = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		storableinput = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method readStorable()
	/**
	 * Method testReadStorable is testing readStorable
	 * @see org.jhotdraw.util.StorableInput#readStorable()
	 */
	// JUnitDoclet end javadoc_method readStorable()
	public void testReadStorable() throws Exception {
		// JUnitDoclet begin method readStorable
		// JUnitDoclet end method readStorable
	}

	// JUnitDoclet begin javadoc_method readString()
	/**
	 * Method testReadString is testing readString
	 * @see org.jhotdraw.util.StorableInput#readString()
	 */
	// JUnitDoclet end javadoc_method readString()
	public void testReadString() throws Exception {
		// JUnitDoclet begin method readString
		// JUnitDoclet end method readString
	}

	// JUnitDoclet begin javadoc_method readInt()
	/**
	 * Method testReadInt is testing readInt
	 * @see org.jhotdraw.util.StorableInput#readInt()
	 */
	// JUnitDoclet end javadoc_method readInt()
	public void testReadInt() throws Exception {
		// JUnitDoclet begin method readInt
		// JUnitDoclet end method readInt
	}

	// JUnitDoclet begin javadoc_method readLong()
	/**
	 * Method testReadLong is testing readLong
	 * @see org.jhotdraw.util.StorableInput#readLong()
	 */
	// JUnitDoclet end javadoc_method readLong()
	public void testReadLong() throws Exception {
		// JUnitDoclet begin method readLong
		// JUnitDoclet end method readLong
	}

	// JUnitDoclet begin javadoc_method readColor()
	/**
	 * Method testReadColor is testing readColor
	 * @see org.jhotdraw.util.StorableInput#readColor()
	 */
	// JUnitDoclet end javadoc_method readColor()
	public void testReadColor() throws Exception {
		// JUnitDoclet begin method readColor
		// JUnitDoclet end method readColor
	}

	// JUnitDoclet begin javadoc_method readDouble()
	/**
	 * Method testReadDouble is testing readDouble
	 * @see org.jhotdraw.util.StorableInput#readDouble()
	 */
	// JUnitDoclet end javadoc_method readDouble()
	public void testReadDouble() throws Exception {
		// JUnitDoclet begin method readDouble
		// JUnitDoclet end method readDouble
	}

	// JUnitDoclet begin javadoc_method readBoolean()
	/**
	 * Method testReadBoolean is testing readBoolean
	 * @see org.jhotdraw.util.StorableInput#readBoolean()
	 */
	// JUnitDoclet end javadoc_method readBoolean()
	public void testReadBoolean() throws Exception {
		// JUnitDoclet begin method readBoolean
		// JUnitDoclet end method readBoolean
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}

}
