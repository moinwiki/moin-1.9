/*
 * @(#)Test.java
 *
 * Project:		JHotdraw - a GUI framework for technical drawings
 *				http://www.jhotdraw.org
 *				http://jhotdraw.sourceforge.net
 * Copyright:	© by the original author(s) and all contributors
 * License:		Lesser GNU Public License (LGPL)
 *				http://www.opensource.org/licenses/lgpl-license.html
 */
package org.jhotdraw.test.util;

import org.jhotdraw.util.JDOStorageFormat;
import junit.framework.TestCase;
// JUnitDoclet begin import
// JUnitDoclet end import

/*
* Generated by JUnitDoclet, a tool provided by
* ObjectFab GmbH under LGPL.
* Please see www.junitdoclet.org, www.gnu.org
* and www.objectfab.de for informations about
* the tool, the licence and the authors.
*/

// JUnitDoclet begin javadoc_class
/**
* TestCase JDOStorageFormatTest is generated by
* JUnitDoclet to hold the tests for JDOStorageFormat.
* @see org.jhotdraw.util.JDOStorageFormat
*/
// JUnitDoclet end javadoc_class
public class JDOStorageFormatTest
// JUnitDoclet begin extends_implements
extends TestCase
// JUnitDoclet end extends_implements
{
	// JUnitDoclet begin class
	// instance variables, helper methods, ... put them in this marker
	private JDOStorageFormat jdostorageformat;
	// JUnitDoclet end class

	/**
	 * Constructor JDOStorageFormatTest is
	 * basically calling the inherited constructor to
	 * initiate the TestCase for use by the Framework.
	 */
	public JDOStorageFormatTest(String name) {
		// JUnitDoclet begin method JDOStorageFormatTest
		super(name);
		// JUnitDoclet end method JDOStorageFormatTest
	}

	/**
	 * Factory method for instances of the class to be tested.
	 */
	public JDOStorageFormat createInstance() throws Exception {
		// JUnitDoclet begin method testcase.createInstance
		return new JDOStorageFormat();
		// JUnitDoclet end method testcase.createInstance
	}

	/**
	 * Method setUp is overwriting the framework method to
	 * prepare an instance of this TestCase for a single test.
	 * It's called from the JUnit framework only.
	 */
	protected void setUp() throws Exception {
		// JUnitDoclet begin method testcase.setUp
		super.setUp();
		jdostorageformat = createInstance();
		// JUnitDoclet end method testcase.setUp
	}

	/**
	 * Method tearDown is overwriting the framework method to
	 * clean up after each single test of this TestCase.
	 * It's called from the JUnit framework only.
	 */
	protected void tearDown() throws Exception {
		// JUnitDoclet begin method testcase.tearDown
		jdostorageformat = null;
		super.tearDown();
		// JUnitDoclet end method testcase.tearDown
	}

	// JUnitDoclet begin javadoc_method createFileDescription()
	/**
	 * Method testCreateFileDescription is testing createFileDescription
	 * @see org.jhotdraw.util.JDOStorageFormat#createFileDescription()
	 */
	// JUnitDoclet end javadoc_method createFileDescription()
	public void testCreateFileDescription() throws Exception {
		// JUnitDoclet begin method createFileDescription
		// JUnitDoclet end method createFileDescription
	}

	// JUnitDoclet begin javadoc_method store()
	/**
	 * Method testStore is testing store
	 * @see org.jhotdraw.util.JDOStorageFormat#store(java.lang.String, org.jhotdraw.framework.Drawing)
	 */
	// JUnitDoclet end javadoc_method store()
	public void testStore() throws Exception {
		// JUnitDoclet begin method store
		// JUnitDoclet end method store
	}

	// JUnitDoclet begin javadoc_method restore()
	/**
	 * Method testRestore is testing restore
	 * @see org.jhotdraw.util.JDOStorageFormat#restore(java.lang.String)
	 */
	// JUnitDoclet end javadoc_method restore()
	public void testRestore() throws Exception {
		// JUnitDoclet begin method restore
		// JUnitDoclet end method restore
	}

	// JUnitDoclet begin javadoc_method main()
	/**
	 * Method testMain is testing main
	 * @see org.jhotdraw.util.JDOStorageFormat#main(java.lang.String[])
	 */
	// JUnitDoclet end javadoc_method main()
	public void testMain() throws Exception {
		// JUnitDoclet begin method main
		// JUnitDoclet end method main
	}

	// JUnitDoclet begin javadoc_method testVault
	/**
	 * JUnitDoclet moves marker to this method, if there is not match
	 * for them in the regenerated code and if the marker is not empty.
	 * This way, no test gets lost when regenerating after renaming.
	 * <b>Method testVault is supposed to be empty.</b>
	 */
	// JUnitDoclet end javadoc_method testVault
	public void testVault() throws Exception {
		// JUnitDoclet begin method testcase.testVault
		// JUnitDoclet end method testcase.testVault
	}
}
